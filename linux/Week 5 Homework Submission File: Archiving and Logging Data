# Step 1: Create, Extract, Compress, and Manage tar Backup Archives

1. Command to **extract** the `TarDocs.tar` archive to the current directory: tar -cvf TarDocs.tar 

2. Command to **create** the `Javaless_Doc.tar` archive from the `TarDocs/` directory, while excluding the `TarDocs/Documents/Java` directory: tar -cf Javaless_Docs.tar TarDocs/Document/

3. Command to ensure `Java/` is not in the new `Javaless_Docs.ta :  ls Javaless_Docs.tar | grep java

**Bonus** 
- Command to create an incremental archive called `logs_backup_tar.gz` with only changed files to `snapshot.file` for the `/var/log` directory:  sudo tar cvf logs_backup.tar.gz var/logs

#### Critical Analysis Question

- Why wouldn't you use the options `-x` and `-c` at the same time with `tar`? you cant create and extract a file at the same time 

---

### Step 2: Create, Manage, and Automate Cron Jobs

1. Cron job for backing up the `/var/log/auth.log` file: 0 6 * * 3 sudo tar cvvf auth_backup.tgz /var/log/auth.log 

---

### Step 3: Write Basic Bash Scripts

1. Brace expansion command to create the four subdirectories:  mkdir /backups/{freemem,diskuse,openlist,freedisk}

2. Paste your `system.sh` script edits below: 
#!/bin/bash

free -h > ~/backups/freemem/free_mem.txt

du -h > ~/backups/diskuse/disk_usage.txt

lsof > ~/backups/openlist/open_list.txt

df -h > ~/backups/freedisk/free_disk.txt


    ```bash
    #!/bin/bash
    [Your solution script contents here]
    ```

3. Command to make the `system.sh` script executable:  chmod +x system.sh


**Optional**
- Commands to test the script and confirm its execution:

**Bonus**

- Command to copy `system` to system-wide cron directory: sudo cp system.sh /etc/cron.weekly

---

### Step 4. Manage Log File Sizes
 
1. Run `sudo nano /etc/logrotate.conf` to edit the `logrotate` configuration file. 

    Configure a log rotation scheme that backs up authentication messages to the `/var/log/auth.log`.

    - Add your config file edits below: 

    ```bash /var/log/auth.log {weekly/rotate7/notifempty/delaycompression/missingok}

    [Your logrotate scheme edits here]
    ```
---

### Bonus: Check for Policy and File Violations

1. Command to verify `auditd` is active: systemctl status auditd


2. Command to set number of retained logs and maximum log file size:
         sudo nano /etc/audit/auditd.conf

    - Add the edits made to the configuration file below: 

    ```bash                                                                                                                                                                                                    max_log_file = 35
num_logs = 7

    [Your solution edits here]
    ```

3. Command using `auditd` to set rules for `/etc/shadow`, `/etc/passwd` and `/var/log/auth.log`:
sudo nano /etc/audit/rules.d/audit.rules


    - Add the edits made to the `rules` file below:
-w /etc/shawdow -p wra -k hashpass_audit       -w /etc/passwd  -p wra -k userpass_audit
-w /var/log/auth.log -p wra -k authlog_audit

    ```bash
    [Your solution edits here]
    ```

4. Command to restart `auditd`: sudo systemctl restart auditd
 

5. Command to list all `auditd` rules: sudo auditctl -l


6. Command to produce an audit report: sudo aureport -au


7. Create a user with `sudo useradd attacker` and produce an audit report that lists account modifications:       sudo useradd attacker sudo aureport -m


8. Command to use `auditd` to watch `/var/log/cron`: sudo auditctl -w /var/log/cron


9. Command to verify `auditd` rules: sudo auditctl -l

